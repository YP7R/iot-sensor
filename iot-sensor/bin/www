#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('iot-sensor:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);


const webSocketServer = require('websocket').server;
const { client } = require('websocket');
let wsServer = new webSocketServer({ httpServer: server })

let datas = []
let clients = []
let pythonws = null
wsServer.on('request', (request) => {

    let ws = request.accept(null, request.origin)
    ws.on('message', (message) => {
        
        msg = JSON.parse(message.utf8Data)
        console.log(msg)
        switch(msg.id){
            case "datas":
                pythonws = ws
                datas = msg.datas
                clients.forEach((client)=>{
                    client.send(JSON.stringify(datas))
                })
                break;

            case "new_client":
                clients.push(ws)
                ws.send(JSON.stringify(datas))
                break;
        }
    })

    ws.on('close', (message) => {
        //When client disconnects, removes him from the client list
        clients.splice(clients.indexOf(ws), 1);
    });

})

/*
wsServer.on('close',()=>{
    for (client in clients){
        client.close()
    }
    pythonws.close()
})
*/

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
